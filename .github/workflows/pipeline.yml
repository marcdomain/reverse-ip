name: EKS CICD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ production, main ]

env:
  AWS_REGION: 'eu-central-1'
  CLUSTER_NAME: 'marcus-eks-cluster'
  SERVICE_NAME: 'reverse-ip-service'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}

jobs:
  build:
    name: Build Artifact
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set Environment Variable
      id: check_env
      run: |
        if [[ $REF == 'refs/heads/production' ]]
        then
          echo "::set-output name=ENVIRONMENT::production"
        else
          echo "::set-output name=ENVIRONMENT::dev"
        fi
      env:
        REF: ${{ github.ref }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Artifact and Push to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.SERVICE_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  k8s:
    name: Apply k8s Manifests
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set Environment Variable
      id: check_env
      run: |
        if [[ $REF == 'refs/heads/production' ]]
        then
          echo "::set-output name=ENVIRONMENT::production"
        else
          echo "::set-output name=ENVIRONMENT::dev"
        fi
      env:
        REF: ${{ github.ref }}

    - name: Apply Manifest
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig
        export KUBECONFIG="./kubeconfig"

        echo "....Setup Helm....."

        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

        helm repo add new-repo https://marcdomain.github.io/demo-helm-chart/charts

        helm install new-repo/demo-helm-chart --set image.tag=${{ github.sha }}

        if [[ "${{ steps.check_env.outputs.environment }}" == "dev" ]]

        fi
